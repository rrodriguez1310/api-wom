"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jest_diff_1 = __importDefault(require("jest-diff"));
const jsonwebtoken_1 = __importDefault(require("jsonwebtoken"));
const removeMetadata_1 = __importDefault(require("./removeMetadata"));
const builtJWTContentMatcher = (comparison) => function (received, expected) {
    if (typeof received !== "string") {
        return {
            pass: false,
            message: () => `Received a ${this.utils.printExpected("string")} token but found a ${this.utils.printReceived(typeof received)}`
        };
    }
    const decoded = jsonwebtoken_1.default.decode(received);
    if (decoded === null) {
        return {
            pass: false,
            message: () => `Was unable to decode the token received: ${this.utils.printReceived(received)}`
        };
    }
    if (typeof decoded === "string") {
        return {
            pass: false,
            message: () => `Decoded token was a a ${this.utils.printReceived("string")} token but found a ${this.utils.printExpected("object")}`
        };
    }
    const cleanedToken = removeMetadata_1.default(decoded);
    const pass = comparison.bind(this)(cleanedToken, expected);
    return {
        pass,
        message: () => {
            const diffString = jest_diff_1.default(expected, cleanedToken, {
                expand: this.expand
            });
            if (diffString) {
                return `Difference

${diffString}`;
            }
            return `Expected: ${this.utils.printExpected(expected)}
Received (decoded): ${this.utils.printReceived(decoded)}`;
        }
    };
};
exports.default = builtJWTContentMatcher;
//# sourceMappingURL=buildJWTContentMatcher.js.map