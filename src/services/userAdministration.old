import { Request, Response } from 'express';
import User from '../models/user.model';
import { TokenDecode } from './authAutomatic.service'
import {DecodeToken} from  './../utils/decodeJwt.utils'

import { IUser } from '../interface/user.interface';

export class UserAdministration {

/**
* Listar usuarios
* validamos que el usuario tenga los privilegios para hacer el cambio
* 
**/
    public async list(req: Request, res: Response): Promise<Response<any> | undefined> {
        try {
            const token:string=req.body.token;
            const pagina:number=Number(req.query.page) || 1;            

            let decodeToken: DecodeToken;
            decodeToken = new DecodeToken(token);
            const decode = await decodeToken.Decode();
            let userId=decode.userId;
            let solicitante= await User.findById(userId);

            if(solicitante.tipo==='administrador'){
                let skip =pagina -1 ;
                skip=skip *10;            
                const suscriptores=await User.find({code:{$exists : true },estado:'true' })
                                      .skip(skip)
                                      .limit(10)            
                                      .exec();
                res.status(200).json({
                    ok:true,
                    skip,
                    suscriptores
                });

            } else{
                return res.status(401).json({message:"Unauthorized user" });
            }     

         } catch (error) {
            return res.status(503).json({ message: "Service unavailable" })
        }
    }
/**
 * Editar informaci√≥n sencible del usuario
 * 
    **/
    public async edit(req: Request, res: Response): Promise<Response<any> | undefined> {
        try {            
            const email: IUser['email'] = req.body.email;
            const cid: number = req.body.code;
            const token: string = req.body.token;
           
             /**
             * Editar usuarios
             * validamos que el usuario tenga los privilegios para hacer el cambio
             * 
             **/
            let decodeToken: DecodeToken;
            decodeToken = new DecodeToken(token);
            const decode = await decodeToken.Decode();
            let userId=decode.userId;
            let solicitante= await User.findById(userId);
    
            if(solicitante.tipo==='administrador'){   
                let actualizado= await User.updateOne({cid:cid},
                    {email:email}
                );
                
                if(actualizado.n==1){
                    return res.status(200).json({message:"Updated succesfully"});  
                }else{
                    return res.status(400).json({message:"Bad request"}); 
                }
               
            } else{
                return res.status(503).json({message:"Service unavailable" });
            }           
         } catch (error) {
            return res.status(401).json({ message: error })
        }
    }
    

    public async delete(req: Request, res: Response): Promise<Response<any> | undefined> {
    try {
        const id: IUser['_id'] = req.body.id;
        const token: string = req.body.token;   
        //  /**
        //  * Eliminar usuarios
        //  * validamos que el usuario tenga los privilegios para hacer el cambio
        //  * 
        //  **/
        let decodeToken: DecodeToken;
        decodeToken = new DecodeToken(token);
        const decode = await decodeToken.Decode();
        let userId=decode.userId;
        let solicitante= await User.findById(userId);

        if(solicitante.tipo==='administrador'){
            let borrado= await User.updateOne({_id:id},
                {estado:'false'}
            );

            if(borrado.n==1){
                return res.status(200).json({message:"Deleted succesfully"});  

            }else{
                return res.status(400).json({message:"Bad request"}); 
            }
           
        } else{
            return res.status(503).json({message:"Service unavailable" });
        }
           

     } catch (error) {
        return res.status(401).json({ message: error })
    }
}

     public async create(req: Request, res: Response): Promise<Response<any> | undefined> {
    try {
        const email: IUser['email'] = req.body.email;
        const name: IUser['nombre'] = req.body.name;
        const surname: IUser['apellido'] = req.body.surname;
        const birthday: IUser['fecha_nacimiento'] = req.body.birthday;
        const gender: IUser['genero'] = req.body.gender;
        const code: IUser['cid'] = req.body.code;
        const state: IUser['estado'] = req.body.state;
        const gateway: IUser['pasarela'] = req.body.gateway;
        const material: IUser['material'] = req.body.material;
        const device: IUser['dispositivos'] = req.body.device;
        const recover_email: IUser['email_recuperacion'] = req.body.recover_email;

        const token: string = req.body.token;
       
        let nuevousuario=new User({
            email:email,
            nombre:name,
            apellido:surname,
            fecha_nacimiento:birthday,
            genero:gender,
            code:code,
            estado: state,
            pasarela : gateway,
            material:material ,
            dispositivos:device ,
            email_recuperacion: recover_email
        });
    
         /**
         * Crear usuarios
         * validamos que el usuario tenga los privilegios para hacer el cambio
         * 
         **/
        let decodeToken: DecodeToken;
        decodeToken = new DecodeToken(token);
        const decode = await decodeToken.Decode();
        let userId=decode.userId;
        let solicitante= await User.findById(userId);

        if(solicitante.tipo==='administrador'){
            let insertado=await nuevousuario.save();


            if(insertado){
                return res.status(200).json({message:"User created successfully"});  

            }else{
                return res.status(400).json({message:" Bad request"}); 
            }
          
        } else{
            return res.status(401).json({message:"User unauthorized " });
        }
           

     } catch (error) {
        return res.status(503).json({ message: error })
    }
}

}